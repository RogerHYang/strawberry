[
  {
    "id": "search",
    "title": "search.graphql",
    "results": [
      {
        "version": "standard",
        "time": "0.0121s",
        "speedRatio": "1.00x"
      },
      {
        "version": "JIT",
        "time": "0.0000s",
        "speedRatio": "12683.50x"
      }
    ],
    "code": "async def _compiled_operation(schema, root_value, variables):\n\n\n    # root_value_variable is `root_value`\n    # level is `0`\n    # indent is `1`\n    # path is `['Query']`\n    # parent_result_variable is `results_0`\n    # Object: Query\n    results_0 = {}\n    root_type_0 = Query.__strawberry_definition__\n    # Query\n    # Query.search\n    arguments = {}\n    arguments['query'] = variables['query']\n    arguments['first'] = variables['first']\n    field = root_type_0.fields[0]\n    value_0 = await field._resolver(root_value, None, **arguments)\n\n\n    # root_value_variable is `value_0`\n    # level is `1`\n    # indent is `0`\n    # path is `['Query', 'search']`\n    # parent_result_variable is `None`\n    None = []\n    for item in value_0:\n\n\n        # root_value_variable is `item`\n        # level is `2`\n        # indent is `1`\n        # path is `['Query', 'search']`\n        # parent_result_variable is `None`\n        # Object: Article\n        results_2 = {}\n        root_type_2 = Article.__strawberry_definition__\n        # Query.search\n        # Query.search.id\n        arguments = {}\n        field = root_type_2.fields[0]\n        value_2 = item.id\n\n\n        # root_value_variable is `value_2`\n        # level is `3`\n        # indent is `0`\n        # path is `['Query', 'search', 'id']`\n        # parent_result_variable is `None`\n        results_2['id'] = value_2\n        # Query.search.title\n        arguments = {}\n        field = root_type_2.fields[1]\n        value_2 = item.title\n\n\n        # root_value_variable is `value_2`\n        # level is `3`\n        # indent is `0`\n        # path is `['Query', 'search', 'title']`\n        # parent_result_variable is `None`\n        results_2['title'] = value_2\n        # Query.search.author\n        arguments = {}\n        field = root_type_2.fields[2]\n        value_2 = item.author\n\n\n        # root_value_variable is `value_2`\n        # level is `3`\n        # indent is `0`\n        # path is `['Query', 'search', 'author']`\n        # parent_result_variable is `None`\n        # Object: User\n        results_3 = {}\n        root_type_3 = User.__strawberry_definition__\n        # Query.search.author\n        # Query.search.author.name\n        arguments = {}\n        field = root_type_3.fields[1]\n        value_3 = value_2.name\n\n\n        # root_value_variable is `value_3`\n        # level is `4`\n        # indent is `0`\n        # path is `['Query', 'search', 'author', 'name']`\n        # parent_result_variable is `None`\n        results_3['name'] = value_3\n        # Query.search.author.birthday\n        arguments = {}\n        field = root_type_3.fields[2]\n        value_3 = value_2.birthday\n\n\n        # root_value_variable is `value_3`\n        # level is `4`\n        # indent is `0`\n        # path is `['Query', 'search', 'author', 'birthday']`\n        # parent_result_variable is `None`\n        # Object: Birthday\n        results_4 = {}\n        root_type_4 = Birthday.__strawberry_definition__\n        # Query.search.author.birthday\n        # Query.search.author.birthday.year\n        arguments = {}\n        field = root_type_4.fields[0]\n        value_4 = value_3.year\n\n\n        # root_value_variable is `value_4`\n        # level is `5`\n        # indent is `0`\n        # path is `['Query', 'search', 'author', 'birthday', 'year']`\n        # parent_result_variable is `None`\n        results_4['year'] = value_4\n        results_3['birthday'] = results_4\n        results_2['author'] = results_3\n        results_1.append(results_2)\n    results_0['search'] = results_1\n\n    return results_0",
    "query": "query Search($query: String!, $first: Int!) {\n  search(query: $query, first: $first) {\n    id\n    title\n\n    author {\n      name\n      birthday {\n        year\n      }\n    }\n  }\n}\n"
  },
  {
    "id": "search_nested",
    "title": "search_nested.graphql",
    "results": [
      {
        "version": "standard",
        "time": "0.0406s",
        "speedRatio": "1.00x"
      },
      {
        "version": "JIT",
        "time": "0.0000s",
        "speedRatio": "18900.00x"
      }
    ],
    "code": "async def _compiled_operation(schema, root_value, variables):\n\n\n    # root_value_variable is `root_value`\n    # level is `0`\n    # indent is `1`\n    # path is `['Query']`\n    # parent_result_variable is `results_0`\n    # Object: Query\n    results_0 = {}\n    root_type_0 = Query.__strawberry_definition__\n    # Query\n    # Query.search\n    arguments = {}\n    arguments['query'] = variables['query']\n    arguments['first'] = variables['first']\n    field = root_type_0.fields[0]\n    value_0 = await field._resolver(root_value, None, **arguments)\n\n\n    # root_value_variable is `value_0`\n    # level is `1`\n    # indent is `0`\n    # path is `['Query', 'search']`\n    # parent_result_variable is `None`\n    None = []\n    for item in value_0:\n\n\n        # root_value_variable is `item`\n        # level is `2`\n        # indent is `1`\n        # path is `['Query', 'search']`\n        # parent_result_variable is `None`\n        # Object: Article\n        results_2 = {}\n        root_type_2 = Article.__strawberry_definition__\n        # Query.search\n        # Query.search.id\n        arguments = {}\n        field = root_type_2.fields[0]\n        value_2 = item.id\n\n\n        # root_value_variable is `value_2`\n        # level is `3`\n        # indent is `0`\n        # path is `['Query', 'search', 'id']`\n        # parent_result_variable is `None`\n        results_2['id'] = value_2\n        # Query.search.title\n        arguments = {}\n        field = root_type_2.fields[1]\n        value_2 = item.title\n\n\n        # root_value_variable is `value_2`\n        # level is `3`\n        # indent is `0`\n        # path is `['Query', 'search', 'title']`\n        # parent_result_variable is `None`\n        results_2['title'] = value_2\n        # Query.search.author\n        arguments = {}\n        field = root_type_2.fields[2]\n        value_2 = item.author\n\n\n        # root_value_variable is `value_2`\n        # level is `3`\n        # indent is `0`\n        # path is `['Query', 'search', 'author']`\n        # parent_result_variable is `None`\n        # Object: User\n        results_3 = {}\n        root_type_3 = User.__strawberry_definition__\n        # Query.search.author\n        # Query.search.author.articles\n        arguments = {}\n        field = root_type_3.fields[3]\n        value_3 = field._resolver(value_2, None, **arguments)\n\n\n        # root_value_variable is `value_3`\n        # level is `4`\n        # indent is `0`\n        # path is `['Query', 'search', 'author', 'articles']`\n        # parent_result_variable is `None`\n        None = []\n        for item in value_3:\n\n\n            # root_value_variable is `item`\n            # level is `5`\n            # indent is `1`\n            # path is `['Query', 'search', 'author', 'articles']`\n            # parent_result_variable is `None`\n            # Object: Article\n            results_5 = {}\n            root_type_5 = Article.__strawberry_definition__\n            # Query.search.author.articles\n            # Query.search.author.articles.title\n            arguments = {}\n            field = root_type_5.fields[1]\n            value_5 = item.title\n\n\n            # root_value_variable is `value_5`\n            # level is `6`\n            # indent is `0`\n            # path is `['Query', 'search', 'author', 'articles', 'title']`\n            # parent_result_variable is `None`\n            results_5['title'] = value_5\n            results_4['articles'] = results_5\n            results_4.append(results_5)\n        results_3['articles'] = results_4\n\n        results_2['author'] = results_3\n        results_1.append(results_2)\n    results_0['search'] = results_1\n\n    return results_0",
    "query": "query Search($query: String!, $first: Int!) {\n  search(query: $query, first: $first) {\n    id\n    title\n\n    author {\n      # this breaks the query\n      articles {\n        title\n      }\n    }\n  }\n}\n"
  }
]